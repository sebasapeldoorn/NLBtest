name: Test

on:
  workflow_dispatch:
  
  pull_request_review:
    types: [submitted]

jobs:
  approved:
    name: Approved
  #  if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    steps:
      - run: echo "This PR was ${{github.event.review.state}}"

  yaml-reader:
    runs-on: ubuntu-latest
    name: Read YAML
    needs: approved
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Read YAML
        uses: nichmor/minimal-read-yaml@v0.0.2
        id: yaml-reader
        with:
          config: './repotest.yml'
      - run: echo ${{steps.yaml-reader.outputs['environment.version']}}
      
  get-version:
    runs-on: ubuntu-latest
    name: Get version
    needs: yaml-reader
    steps:
      - id: version
        run: |
          version=$(echo ${{steps.yaml-reader.outputs['environment.version']}} | cut -d ":" -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
          semantic=$(echo ${{steps.version.outputs.version}} | cut -d "v" -f2)
          echo "semantic=$semantic" >> $GITHUB_OUTPUT
      - run: echo "${{steps.version.outputs.version}}"
      - run: echo "${{steps.version.outputs.semantic}}"
     
  #registerartifact:
  #    needs: approved
  #    runs-on: ubuntu-latest
  #    name: ServiceNow Register Artifact
  #
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v3
  #
  #      - name: ServiceNow Register Artifact
  #        uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
  #        id: update
  #        with:
  #          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
  #          instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #          context-github: ${{ toJSON(github) }}
  #          job-name: 'ServiceNow Register Artifact'
  #          artifacts: '[{"name": "MyFirstPackage","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
        
  #registerpackage:
  #  name: Register Package
  #  needs: registerartifact
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: ServiceNow Register Package
  #      uses: ServiceNow/servicenow-devops-register-package@v3.1.0
  #      with:
  #        devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
  #        instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #        context-github: ${{ toJSON(github) }}
  #        job-name: 'Register Artifact'
  #        artifacts: '[{"name": "MyFirstPackage","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
  #        package-name: 'MyFirstPackage.war'
  
  change:
    name: Change
  #  needs: registerpackage
    needs: get-version
    runs-on: ubuntu-latest
    steps:     
    - name: ServiceNow Change
      uses: ServiceNow/servicenow-devops-change@v4.1.0
      id: create
      with:
        devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Change'
        change-request: '{"setCloseCode":"true","autoCloseChange":true,"attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
        interval: '100'
        timeout: '3600'
        changeCreationTimeOut: '3600'
        abortOnChangeCreationFailure: true
        abortOnChangeStepTimeout: true
        deployment-gate: '{"environment":"dev","jobName":"Deploy"}'
    - name: Output of Change Creation
      run: echo "change-request-number = ${{ steps.create.outputs.change-request-number }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy
    needs: change
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Deployment steps
      run: echo "Deployment completed"
